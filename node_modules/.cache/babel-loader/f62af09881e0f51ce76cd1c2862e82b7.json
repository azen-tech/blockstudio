{"ast":null,"code":"var _jsxFileName = \"/home/azen/Documents/blockstudio-main/App/src/Components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Artist from \"./Artist\";\nimport Audience from \"./Audience\";\nimport { COLORS } from \"./Colors\";\nimport Logo from \"../Assets/logo.png\";\nimport contractMeta from \"../Build/blockstudio.json\";\nimport Web3 from 'web3';\nimport contract from 'truffle-contract';\nimport { create } from 'ipfs-http-client';\nimport Loader from \"react-loader-spinner\";\nimport SwitchSelector from \"react-switch-selector\";\n/*\nclass Login extends React.Component {\n\n  constructor(props){\n    super(props)\n      this.web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\")\n      this.contract = contract(contractMeta)\n      this.contract.setProvider(this.web3.currentProvider)\n      this.state = { account : \"\", ipfs : \"\", username: \"\", type : \"\", choice : \"1\", }\n    }\n\n  componentDidMount(){\n    this.loadBlockchain().then(() => console.log(\"Loaded Blockchain\"))\n    this.loadIPFS().then(() => console.log(\"Loaded IPFS\"))\n    this.loginUser().then(() => console.log(\"Login Successful\"))\n  }\n\n  async loadBlockchain(){\n    const accounts = await this.web3.eth.getAccounts()\n    this.setState({account:accounts[0]})\n  }\n\n  async loadIPFS(){\n    const conn = create({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })\n    this.setState({ipfs:conn})\n  }\n\n  loginUser = async () => {\n      let val = \"0\"\n      const contractInstance = await this.contract.deployed()\n      await contractInstance.checkUser({from:this.state.account}).then((x)=>{ val = x.toString()})\n      this.setState({type: val})\n  }\n\n  registerUser = async () =>{\n    // console.log(\"registering user\")\n    const contractInstance = await this.contract.deployed()\n    if (this.state.choice === \"1\")\n      await contractInstance.addNewArtist(this.state.username,{from:this.state.account}).then(() => this.loginUser())\n    if (this.state.choice === \"2\")\n      await contractInstance.addNewAudience(this.state.username,{from:this.state.account}).then(() => this.loginUser())\n  }\n\n  render(){\n\n    if (this.state.type === \"0\" ){\n      return (\n        <div style = {styles.main}>\n          <img style = {styles.img} alt=\"logo\" src = {Logo}/>\n          <div style = {styles.switch}> \n            <SwitchSelector\n              onChange = {(val) => {this.setState({choice: val})}} \n              options = {[\n                {label: \"Artist ðŸŽ™\", value: \"1\", selectedBackgroundColor: \"#26ae5f\",},\n                {label: \"Audience ðŸŽ§\", value: \"2\", selectedBackgroundColor: \"#26ae5f\"}\n              ]}\n              wrapperBorderRadius = {50} \n              optionBorderRadius = {50}\n              fontSize = {\"20\"} \n              fontColor={COLORS.white}\n              backgroundColor={COLORS.black} />\n          </div>\n          <div style={styles.username}>\n            <input  type=\"text\" placeholder =\"Username\"  style = {styles.textInput} \n                  value={this.state.username} required\n                  onChange={(x)=>{this.setState({username:x.target.value})}} />\n          </div>\n          <button style = {styles.button} onClick = {this.registerUser}> Register </button>\n        </div>\n      );\n    }\n\n    else if (this.state.type === \"1\"){\n      return (\n        <Artist \n          account = {this.state.account}\n          contract = {this.contract}\n          ipfs = {this.state.ipfs}\n        />\n      )\n    }\n\n    else if (this.state.type === \"2\"){\n      return (\n        <Audience\n          account = {this.state.account}\n          contract = {this.contract}\n          ipfs = {this.state.ipfs}\n        />\n      )\n    }\n\n    else {\n      return (\n        <div style = {styles.main}>\n          <Loader type = \"Bars\" color = {COLORS.black}/>\n        </div>\n      )\n    }\n  }\n}\n\nconst styles = {\n  main : {\n    height:\"100vh\",\n    display:\"flex\", \n    flexDirection:\"column\", \n    justifyContent: \"space-around\", \n    alignItems: \"center\", \n    background:COLORS.brown\n  },\n  button : { \n    height: \"7.5%\",\n    width : \"15%\", \n    fontSize: \"1.2rem\", \n    fontWeight: \"500\",  \n    cursor:\"pointer\", \n    borderRadius:\"50px\",\n    boxShadow: \"2px 5px 2px #999\",\n    color: COLORS.white,\n    background:COLORS.black,\n  },\n  img : {\n    width:\"32.5%\",\n    borderRadius:\"100px\", \n    boxShadow: \"2px 5px 2px #999\",\n  },\n  switch: {\n    height: \"7.5%\",\n    width: \"25%\",  \n    fontSize: \"1.2rem\", \n    fontWeight: \"500\", \n  },\n  form:{\n    marginBottom :\"5%\",\n    marginTop :\"5%\",\n    padding :\"5%\",\n    display:\"flex\", \n    flexDirection:\"column\",\n    alignItems: \"center\", \n    borderRadius:\"10px\",\n    border: \"2px solid\",\n    overflow: \"auto\",\n    gap : \"20px\",\n    borderColor :COLORS.black,\n    backgroundColor:COLORS.brown,\n  },\n  username:{\n    height: \"6%\",\n    width : \"15%\", \n    fontSize: \"1.2rem\",  \n  },\n  textInput : {\n    height: \"100%\",\n    borderRadius:\"15px\",\n    padding: \"3%\",\n    textAlign: \"center\",\n   },\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isConnected, setIsConnected] = useState(false);\n  const [ethBalance, setEthBalance] = useState(\"\");\n\n  const detectCurrentProvider = () => {\n    let provider;\n\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      console.log(\"Non-ethereum browser detected. You should install Metamask\");\n    }\n\n    return provider;\n  };\n\n  const onConnect = async () => {\n    try {\n      const currentProvider = detectCurrentProvider();\n\n      if (currentProvider) {\n        await currentProvider.request({\n          method: 'eth_requestAccounts'\n        });\n        const web3 = new Web3(currentProvider);\n        const userAccount = await web3.eth.getAccounts();\n        const account = userAccount[0];\n        let ethBalance = await web3.eth.getBalance(account);\n        setEthBalance(ethBalance);\n        setIsConnected(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onDisconnect = () => {\n    setIsConnected(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React dApp authentication with React, We3.js and Metamask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wrapper\",\n      children: !isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"app-button__login\",\n          onClick: onConnect,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" You are connected to metamask.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-balance\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Balance: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), ethBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"app-buttons__logout\",\n          onClick: onDisconnect,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WD0gFgcxczUF9KnS+7Z27Km5dsE=\");\n\n_c = App;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/azen/Documents/blockstudio-main/App/src/Components/Login.js"],"names":["React","Artist","Audience","COLORS","Logo","contractMeta","Web3","contract","create","Loader","SwitchSelector","App","isConnected","setIsConnected","useState","ethBalance","setEthBalance","detectCurrentProvider","provider","window","ethereum","web3","currentProvider","console","log","onConnect","request","method","userAccount","eth","getAccounts","account","getBalance","err","onDisconnect","Login"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Artist from \"./Artist\"\nimport Audience from \"./Audience\"\nimport {COLORS} from \"./Colors\"\nimport Logo from \"../Assets/logo.png\"\nimport contractMeta from \"../Build/blockstudio.json\"\n\nimport Web3 from 'web3'\nimport contract from 'truffle-contract'\nimport {create} from 'ipfs-http-client'\nimport Loader from \"react-loader-spinner\"\nimport SwitchSelector from \"react-switch-selector\"\n/*\nclass Login extends React.Component {\n\n  constructor(props){\n    super(props)\n      this.web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\")\n      this.contract = contract(contractMeta)\n      this.contract.setProvider(this.web3.currentProvider)\n      this.state = { account : \"\", ipfs : \"\", username: \"\", type : \"\", choice : \"1\", }\n    }\n\n  componentDidMount(){\n    this.loadBlockchain().then(() => console.log(\"Loaded Blockchain\"))\n    this.loadIPFS().then(() => console.log(\"Loaded IPFS\"))\n    this.loginUser().then(() => console.log(\"Login Successful\"))\n  }\n\n  async loadBlockchain(){\n    const accounts = await this.web3.eth.getAccounts()\n    this.setState({account:accounts[0]})\n  }\n\n  async loadIPFS(){\n    const conn = create({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })\n    this.setState({ipfs:conn})\n  }\n\n  loginUser = async () => {\n      let val = \"0\"\n      const contractInstance = await this.contract.deployed()\n      await contractInstance.checkUser({from:this.state.account}).then((x)=>{ val = x.toString()})\n      this.setState({type: val})\n  }\n\n  registerUser = async () =>{\n    // console.log(\"registering user\")\n    const contractInstance = await this.contract.deployed()\n    if (this.state.choice === \"1\")\n      await contractInstance.addNewArtist(this.state.username,{from:this.state.account}).then(() => this.loginUser())\n    if (this.state.choice === \"2\")\n      await contractInstance.addNewAudience(this.state.username,{from:this.state.account}).then(() => this.loginUser())\n  }\n\n  render(){\n\n    if (this.state.type === \"0\" ){\n      return (\n        <div style = {styles.main}>\n          <img style = {styles.img} alt=\"logo\" src = {Logo}/>\n          <div style = {styles.switch}> \n            <SwitchSelector\n              onChange = {(val) => {this.setState({choice: val})}} \n              options = {[\n                {label: \"Artist ðŸŽ™\", value: \"1\", selectedBackgroundColor: \"#26ae5f\",},\n                {label: \"Audience ðŸŽ§\", value: \"2\", selectedBackgroundColor: \"#26ae5f\"}\n              ]}\n              wrapperBorderRadius = {50} \n              optionBorderRadius = {50}\n              fontSize = {\"20\"} \n              fontColor={COLORS.white}\n              backgroundColor={COLORS.black} />\n          </div>\n          <div style={styles.username}>\n            <input  type=\"text\" placeholder =\"Username\"  style = {styles.textInput} \n                  value={this.state.username} required\n                  onChange={(x)=>{this.setState({username:x.target.value})}} />\n          </div>\n          <button style = {styles.button} onClick = {this.registerUser}> Register </button>\n        </div>\n      );\n    }\n\n    else if (this.state.type === \"1\"){\n      return (\n        <Artist \n          account = {this.state.account}\n          contract = {this.contract}\n          ipfs = {this.state.ipfs}\n        />\n      )\n    }\n\n    else if (this.state.type === \"2\"){\n      return (\n        <Audience\n          account = {this.state.account}\n          contract = {this.contract}\n          ipfs = {this.state.ipfs}\n        />\n      )\n    }\n\n    else {\n      return (\n        <div style = {styles.main}>\n          <Loader type = \"Bars\" color = {COLORS.black}/>\n        </div>\n      )\n    }\n  }\n}\n\nconst styles = {\n  main : {\n    height:\"100vh\",\n    display:\"flex\", \n    flexDirection:\"column\", \n    justifyContent: \"space-around\", \n    alignItems: \"center\", \n    background:COLORS.brown\n  },\n  button : { \n    height: \"7.5%\",\n    width : \"15%\", \n    fontSize: \"1.2rem\", \n    fontWeight: \"500\",  \n    cursor:\"pointer\", \n    borderRadius:\"50px\",\n    boxShadow: \"2px 5px 2px #999\",\n    color: COLORS.white,\n    background:COLORS.black,\n  },\n  img : {\n    width:\"32.5%\",\n    borderRadius:\"100px\", \n    boxShadow: \"2px 5px 2px #999\",\n  },\n  switch: {\n    height: \"7.5%\",\n    width: \"25%\",  \n    fontSize: \"1.2rem\", \n    fontWeight: \"500\", \n  },\n  form:{\n    marginBottom :\"5%\",\n    marginTop :\"5%\",\n    padding :\"5%\",\n    display:\"flex\", \n    flexDirection:\"column\",\n    alignItems: \"center\", \n    borderRadius:\"10px\",\n    border: \"2px solid\",\n    overflow: \"auto\",\n    gap : \"20px\",\n    borderColor :COLORS.black,\n    backgroundColor:COLORS.brown,\n  },\n  username:{\n    height: \"6%\",\n    width : \"15%\", \n    fontSize: \"1.2rem\",  \n  },\n  textInput : {\n    height: \"100%\",\n    borderRadius:\"15px\",\n    padding: \"3%\",\n    textAlign: \"center\",\n   },\n}\n*/\nfunction App() {\n  \n  const [isConnected, setIsConnected] = useState(false);\n  const [ethBalance, setEthBalance] = useState(\"\");\n  \n  const detectCurrentProvider = () => {\n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      console.log(\"Non-ethereum browser detected. You should install Metamask\");\n    }\n    return provider;\n  };\n  \n  const onConnect = async() => {\n    try {\n      const currentProvider = detectCurrentProvider();\n      if(currentProvider) {\n        await currentProvider.request({method: 'eth_requestAccounts'});\n        const web3 = new Web3(currentProvider);\n        const userAccount  =await web3.eth.getAccounts();\n        const account = userAccount[0];\n        let ethBalance = await web3.eth.getBalance(account);\n        setEthBalance(ethBalance);\n        setIsConnected(true);\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }\n  \n  const onDisconnect = () => {\n    setIsConnected(false);\n  }\n  \n  \n  \n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <h1>React dApp authentication with React, We3.js and Metamask</h1>\n      </div>\n      <div className=\"app-wrapper\">\n        {!isConnected && (\n          <div>\n            <button className=\"app-button__login\" onClick={onConnect}>\n            Login\n            </button>\n          </div>\n        )}\n      </div>\n      {isConnected && (\n        <div className=\"app-wrapper\">\n          <div className=\"app-details\">\n            <h2> You are connected to metamask.</h2>\n            <div className=\"app-balance\">\n              <span>Balance: </span>\n              {ethBalance}\n            </div>\n          </div>\n          <div>\n            <button className=\"app-buttons__logout\" onClick={onDisconnect}>\n            Disconnect\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Login;"]},"metadata":{},"sourceType":"module"}