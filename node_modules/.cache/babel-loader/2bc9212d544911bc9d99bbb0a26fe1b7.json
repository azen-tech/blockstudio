{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/azen/Documents/blockstudio-main/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/azen/Documents/blockstudio-main/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Web3Shim = require(\"truffle-interface-adapter\").Web3Shim;\n\nvar utils = require(\"../utils\");\n\nvar execute = require(\"../execute\");\n\nvar bootstrap = require(\"./bootstrap\");\n\nmodule.exports = function (Contract) {\n  return {\n    setProvider: function setProvider(provider) {\n      if (!provider) {\n        throw new Error(\"Invalid provider passed to setProvider(); provider is \".concat(provider));\n      }\n\n      this.web3.setProvider(provider);\n      this.currentProvider = provider;\n    },\n    new: function _new() {\n      utils.checkProvider(this);\n\n      if (!this.bytecode || this.bytecode === \"0x\") {\n        throw new Error(\"\".concat(this.contractName, \" error: contract binary not set. Can't deploy new instance.\\n\") + \"This contract may be abstract, not implement an abstract parent's methods completely\\n\" + \"or not invoke an inherited contract's constructor correctly\\n\");\n      }\n\n      var constructorABI = this.abi.filter(function (i) {\n        return i.type === \"constructor\";\n      })[0];\n      return execute.deploy.call(this, constructorABI).apply(void 0, arguments);\n    },\n    at: function at(address) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var onChainCode;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(address == null || typeof address !== \"string\" || address.length !== 42)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Invalid address passed to \".concat(_this.contractName, \".at(): \").concat(address));\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return _this.detectNetwork();\n\n              case 5:\n                _context.next = 7;\n                return _this.web3.eth.getCode(address);\n\n              case 7:\n                onChainCode = _context.sent;\n                _context.next = 10;\n                return utils.checkCode(onChainCode, _this.contractName, address);\n\n              case 10:\n                return _context.abrupt(\"return\", new _this(address));\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }))();\n    },\n    deployed: function deployed() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                utils.checkProvider(_this2);\n                _context2.next = 4;\n                return _this2.detectNetwork();\n\n              case 4:\n                utils.checkNetworkArtifactMatch(_this2);\n                utils.checkDeployment(_this2);\n                return _context2.abrupt(\"return\", new _this2(_this2.address));\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw _context2.t0;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 9]]);\n      }))();\n    },\n    defaults: function defaults(class_defaults) {\n      var _this3 = this;\n\n      if (this.class_defaults == null) {\n        this.class_defaults = {};\n      }\n\n      if (class_defaults == null) {\n        class_defaults = {};\n      }\n\n      Object.keys(class_defaults).forEach(function (key) {\n        var value = class_defaults[key];\n        _this3.class_defaults[key] = value;\n      });\n      return this.class_defaults;\n    },\n    hasNetwork: function hasNetwork(network_id) {\n      return this._json.networks[\"\".concat(network_id)] != null;\n    },\n    isDeployed: function isDeployed() {\n      if (this.network_id == null) {\n        return false;\n      }\n\n      if (this._json.networks[this.network_id] == null) {\n        return false;\n      }\n\n      return !!this.network.address;\n    },\n    detectNetwork: function detectNetwork() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _yield$_this4$web3$et, gasLimit, chainNetworkID, _yield$_this4$web3$et2, _gasLimit;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(_this4.network_id && _this4.networks[_this4.network_id] != null)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                _context3.prev = 1;\n                _context3.next = 4;\n                return _this4.web3.eth.getBlock(\"latest\");\n\n              case 4:\n                _yield$_this4$web3$et = _context3.sent;\n                gasLimit = _yield$_this4$web3$et.gasLimit;\n                return _context3.abrupt(\"return\", {\n                  id: _this4.network_id,\n                  blockLimit: gasLimit\n                });\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](1);\n                throw _context3.t0;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.next = 15;\n                return _this4.web3.eth.net.getId();\n\n              case 15:\n                chainNetworkID = _context3.sent;\n                _context3.next = 18;\n                return _this4.web3.eth.getBlock(\"latest\");\n\n              case 18:\n                _yield$_this4$web3$et2 = _context3.sent;\n                _gasLimit = _yield$_this4$web3$et2.gasLimit;\n                _context3.next = 22;\n                return utils.setInstanceNetworkID(_this4, chainNetworkID, _gasLimit);\n\n              case 22:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 25:\n                _context3.prev = 25;\n                _context3.t1 = _context3[\"catch\"](12);\n                throw _context3.t1;\n\n              case 28:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 9], [12, 25]]);\n      }))();\n    },\n    setNetwork: function setNetwork(network_id) {\n      if (!network_id) return;\n      this.network_id = \"\".concat(network_id);\n    },\n    setNetworkType: function setNetworkType() {\n      var networkType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ethereum\";\n\n      if (this.web3) {\n        this.web3.setNetworkType(networkType);\n      }\n\n      this.networkType = networkType;\n    },\n    setWallet: function setWallet(wallet) {\n      this.web3.eth.accounts.wallet = wallet;\n    },\n    // Overrides the deployed address to null.\n    // You must call this explicitly so you don't inadvertently do this otherwise.\n    resetAddress: function resetAddress() {\n      delete this.network.address;\n    },\n    link: function link(name, address) {\n      var _this5 = this;\n\n      // Case: Contract.link(instance)\n      if (typeof name === \"function\") {\n        var contract = name;\n\n        if (contract.isDeployed() === false) {\n          throw new Error(\"Cannot link contract without an address.\");\n        }\n\n        this.link(contract.contractName, contract.address); // Merge events so this contract knows about library's events\n\n        Object.keys(contract.events).forEach(function (topic) {\n          _this5.network.events[topic] = contract.events[topic];\n        });\n        return;\n      } // Case: Contract.link({<libraryName>: <address>, ... })\n\n\n      if (typeof name === \"object\") {\n        var obj = name;\n        Object.keys(obj).forEach(function (name) {\n          var a = obj[name];\n\n          _this5.link(name, a);\n        });\n        return;\n      } // Case: Contract.link(<libraryName>, <address>)\n\n\n      if (this._json.networks[this.network_id] == null) {\n        this._json.networks[this.network_id] = {\n          events: {},\n          links: {}\n        };\n      }\n\n      this.network.links[name] = address;\n    },\n    // Note, this function can be called with two input types:\n    // 1. Object with a bunch of data; this data will be merged with the json data of contract being cloned.\n    // 2. network id; this will clone the contract and set a specific network id upon cloning.\n    clone: function clone(json) {\n      json = json || {};\n\n      var temp = function TruffleContract() {\n        this.constructor = temp;\n        return Contract.apply(this, arguments);\n      };\n\n      temp.prototype = Object.create(this.prototype);\n      var network_id; // If we have a network id passed\n\n      if (typeof json !== \"object\") {\n        network_id = json;\n        json = this._json;\n      }\n\n      json = utils.merge({}, this._json || {}, json);\n      temp._constructorMethods = this._constructorMethods;\n      temp._properties = this._properties;\n      temp._property_values = {};\n      temp._json = json;\n      bootstrap(temp);\n      temp.web3 = new Web3Shim({\n        type: temp.networkType\n      });\n      temp.class_defaults = temp.prototype.defaults || {};\n\n      if (network_id) {\n        temp.setNetwork(network_id);\n      } // Copy over custom key/values to the contract class\n\n\n      Object.keys(json).forEach(function (key) {\n        if (key.indexOf(\"x-\") !== 0) return;\n        temp[key] = json[key];\n      });\n      return temp;\n    },\n    addProp: function addProp(key, fn) {\n      var _this6 = this;\n\n      var getter = function getter() {\n        if (fn.get != null) {\n          return fn.get.call(_this6);\n        }\n\n        return _this6._property_values[key] || fn.call(_this6);\n      };\n\n      var setter = function setter(val) {\n        if (fn.set != null) {\n          fn.set.call(_this6, val);\n          return;\n        } // If there's not a setter, then the property is immutable.\n\n\n        throw new Error(\"\".concat(key, \" property is immutable\"));\n      };\n\n      var definition = {};\n      definition.enumerable = false;\n      definition.configurable = false;\n      definition.get = getter;\n      definition.set = setter;\n      Object.defineProperty(this, key, definition);\n    },\n    toJSON: function toJSON() {\n      return this._json;\n    },\n    decodeLogs: utils.decodeLogs\n  };\n};","map":{"version":3,"sources":["/home/azen/Documents/blockstudio-main/App/node_modules/truffle-contract/lib/contract/constructorMethods.js"],"names":["Web3Shim","require","utils","execute","bootstrap","module","exports","Contract","setProvider","provider","Error","web3","currentProvider","new","checkProvider","bytecode","contractName","constructorABI","abi","filter","i","type","deploy","call","arguments","at","address","length","detectNetwork","eth","getCode","onChainCode","checkCode","deployed","checkNetworkArtifactMatch","checkDeployment","defaults","class_defaults","Object","keys","forEach","key","value","hasNetwork","network_id","_json","networks","isDeployed","network","getBlock","gasLimit","id","blockLimit","net","getId","chainNetworkID","setInstanceNetworkID","setNetwork","setNetworkType","networkType","setWallet","wallet","accounts","resetAddress","link","name","contract","events","topic","obj","a","links","clone","json","temp","TruffleContract","constructor","apply","prototype","create","merge","_constructorMethods","_properties","_property_values","indexOf","addProp","fn","getter","get","setter","val","set","definition","enumerable","configurable","defineProperty","toJSON","decodeLogs"],"mappings":"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","sourcesContent":["const Web3Shim = require(\"truffle-interface-adapter\").Web3Shim;\nconst utils = require(\"../utils\");\nconst execute = require(\"../execute\");\nconst bootstrap = require(\"./bootstrap\");\n\nmodule.exports = Contract => ({\n  setProvider(provider) {\n    if (!provider) {\n      throw new Error(\n        `Invalid provider passed to setProvider(); provider is ${provider}`\n      );\n    }\n\n    this.web3.setProvider(provider);\n    this.currentProvider = provider;\n  },\n\n  new() {\n    utils.checkProvider(this);\n\n    if (!this.bytecode || this.bytecode === \"0x\") {\n      throw new Error(\n        `${\n          this.contractName\n        } error: contract binary not set. Can't deploy new instance.\\n` +\n          `This contract may be abstract, not implement an abstract parent's methods completely\\n` +\n          `or not invoke an inherited contract's constructor correctly\\n`\n      );\n    }\n\n    var constructorABI = this.abi.filter(i => i.type === \"constructor\")[0];\n\n    return execute.deploy.call(this, constructorABI)(...arguments);\n  },\n\n  async at(address) {\n    if (\n      address == null ||\n      typeof address !== \"string\" ||\n      address.length !== 42\n    ) {\n      throw new Error(\n        `Invalid address passed to ${this.contractName}.at(): ${address}`\n      );\n    }\n\n    try {\n      await this.detectNetwork();\n      const onChainCode = await this.web3.eth.getCode(address);\n      await utils.checkCode(onChainCode, this.contractName, address);\n      return new this(address);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async deployed() {\n    try {\n      utils.checkProvider(this);\n      await this.detectNetwork();\n      utils.checkNetworkArtifactMatch(this);\n      utils.checkDeployment(this);\n      return new this(this.address);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  defaults(class_defaults) {\n    if (this.class_defaults == null) {\n      this.class_defaults = {};\n    }\n\n    if (class_defaults == null) {\n      class_defaults = {};\n    }\n\n    Object.keys(class_defaults).forEach(key => {\n      const value = class_defaults[key];\n      this.class_defaults[key] = value;\n    });\n\n    return this.class_defaults;\n  },\n\n  hasNetwork(network_id) {\n    return this._json.networks[`${network_id}`] != null;\n  },\n\n  isDeployed() {\n    if (this.network_id == null) {\n      return false;\n    }\n\n    if (this._json.networks[this.network_id] == null) {\n      return false;\n    }\n\n    return !!this.network.address;\n  },\n\n  async detectNetwork() {\n    // if artifacts already have a network_id and network configuration synced,\n    // use that network and use latest block gasLimit\n    if (this.network_id && this.networks[this.network_id] != null) {\n      try {\n        const { gasLimit } = await this.web3.eth.getBlock(\"latest\");\n        return { id: this.network_id, blockLimit: gasLimit };\n      } catch (error) {\n        throw error;\n      }\n    }\n    // since artifacts don't have a network_id synced with a network configuration,\n    // poll chain for network_id and sync artifacts\n    try {\n      const chainNetworkID = await this.web3.eth.net.getId();\n      const { gasLimit } = await this.web3.eth.getBlock(\"latest\");\n      return await utils.setInstanceNetworkID(this, chainNetworkID, gasLimit);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  setNetwork(network_id) {\n    if (!network_id) return;\n    this.network_id = `${network_id}`;\n  },\n\n  setNetworkType(networkType = \"ethereum\") {\n    if (this.web3) {\n      this.web3.setNetworkType(networkType);\n    }\n\n    this.networkType = networkType;\n  },\n\n  setWallet(wallet) {\n    this.web3.eth.accounts.wallet = wallet;\n  },\n\n  // Overrides the deployed address to null.\n  // You must call this explicitly so you don't inadvertently do this otherwise.\n  resetAddress() {\n    delete this.network.address;\n  },\n\n  link(name, address) {\n    // Case: Contract.link(instance)\n    if (typeof name === \"function\") {\n      const contract = name;\n\n      if (contract.isDeployed() === false) {\n        throw new Error(\"Cannot link contract without an address.\");\n      }\n\n      this.link(contract.contractName, contract.address);\n\n      // Merge events so this contract knows about library's events\n      Object.keys(contract.events).forEach(topic => {\n        this.network.events[topic] = contract.events[topic];\n      });\n\n      return;\n    }\n\n    // Case: Contract.link({<libraryName>: <address>, ... })\n    if (typeof name === \"object\") {\n      const obj = name;\n      Object.keys(obj).forEach(name => {\n        const a = obj[name];\n        this.link(name, a);\n      });\n      return;\n    }\n\n    // Case: Contract.link(<libraryName>, <address>)\n    if (this._json.networks[this.network_id] == null) {\n      this._json.networks[this.network_id] = {\n        events: {},\n        links: {}\n      };\n    }\n\n    this.network.links[name] = address;\n  },\n\n  // Note, this function can be called with two input types:\n  // 1. Object with a bunch of data; this data will be merged with the json data of contract being cloned.\n  // 2. network id; this will clone the contract and set a specific network id upon cloning.\n  clone(json) {\n    json = json || {};\n\n    const temp = function TruffleContract() {\n      this.constructor = temp;\n      return Contract.apply(this, arguments);\n    };\n\n    temp.prototype = Object.create(this.prototype);\n\n    let network_id;\n\n    // If we have a network id passed\n    if (typeof json !== \"object\") {\n      network_id = json;\n      json = this._json;\n    }\n\n    json = utils.merge({}, this._json || {}, json);\n\n    temp._constructorMethods = this._constructorMethods;\n    temp._properties = this._properties;\n\n    temp._property_values = {};\n    temp._json = json;\n\n    bootstrap(temp);\n\n    temp.web3 = new Web3Shim({\n      type: temp.networkType\n    });\n    temp.class_defaults = temp.prototype.defaults || {};\n\n    if (network_id) {\n      temp.setNetwork(network_id);\n    }\n\n    // Copy over custom key/values to the contract class\n    Object.keys(json).forEach(key => {\n      if (key.indexOf(\"x-\") !== 0) return;\n      temp[key] = json[key];\n    });\n\n    return temp;\n  },\n\n  addProp(key, fn) {\n    const getter = () => {\n      if (fn.get != null) {\n        return fn.get.call(this);\n      }\n\n      return this._property_values[key] || fn.call(this);\n    };\n\n    const setter = val => {\n      if (fn.set != null) {\n        fn.set.call(this, val);\n        return;\n      }\n\n      // If there's not a setter, then the property is immutable.\n      throw new Error(`${key} property is immutable`);\n    };\n\n    const definition = {};\n    definition.enumerable = false;\n    definition.configurable = false;\n    definition.get = getter;\n    definition.set = setter;\n\n    Object.defineProperty(this, key, definition);\n  },\n\n  toJSON() {\n    return this._json;\n  },\n\n  decodeLogs: utils.decodeLogs\n});\n"]},"metadata":{},"sourceType":"script"}